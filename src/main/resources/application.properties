#the "selector" package to scan
app=main

server.port=8091
spring.application.name=shop
#modifies the default Spring Boot behavior and populates the data after the schema is generated by Hibernate.
#This will ensure that after Hibernate schema creation is performed, then additionally schema.sql is read for 
# any additional schema changes, and further data-h2.sql is executed to populate the database.
spring.jpa.defer-datasource-initialization=true
spring.sql.init.data-locations=classpath:data-h2.sql
spring.sql.init.mode=always
logging.level.org.hibernate.stat=debug
# Show all queries
#logging.level.org.hibernate.type=debug
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.root=DEBUG
#logging.level.org.springframework=INFO
#
spring.datasource.url=jdbc:h2:mem:testdb
spring.data.jpa.repositories.bootstrap-mode=default

spring.h2.console.enabled=true

#MYBATIS
mybatis.config-location=classpath:mybatis-config.xml
mybatis.type-handlers-package=com.rnr.example.graphql.shop.configuration.handlers

#GraphQL

#This will allow us to define graphql configuration files throughout different files instead the single schema.sql.
spring.graphql.schema.locations=classpath*:graphql/${app}/
graphql.servlet.maxQueryDepth=10
#Path at which to expose a GraphQL request HTTP endpoint.
spring.graphql.path=/graphql
spring.graphql.graphiql.path=/graphiql
spring.graphql.graphiql.enabled=true

#Refer to
#https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.web




