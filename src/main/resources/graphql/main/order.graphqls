type Order {
    id: ID!
    client: Client!
    orderDate: Date
    billingAddress: String
    orderStatus: OrderStatus!
    orderDetails: [OrderDetails]
}

type OrderDetails {
    id: ID!
    product: Product!
    quantity: Int!
}

input OrderInput {
    clientId: ID!
    orderDate: Date
    billingAddress: String
}

enum OrderStatus {
    NON_DELIVERED,
    SHIPPING,
    DELIVERED
}

#The fields such as ordersById belongs to the type Query which is the root object.
#As we can see in Order type, orderDetails belong to a specific Order 
#which is not a root object.
extend type Query {
    orderById(id:ID): Order
    ordersByClient(id: ID!): [Order]
    orderDetails(id: ID!): [Order]
}

extend type Mutation {
    updateOrderStatus(id: ID!, orderStatus: OrderStatus!): Order
    ordersByClient(id: ID!): [Order]
}
